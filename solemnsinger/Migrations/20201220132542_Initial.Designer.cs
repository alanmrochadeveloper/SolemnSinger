// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using solemnsinger.Models;

namespace solemnsinger.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201220132542_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("RuleTerm", b =>
                {
                    b.Property<long>("RulesId")
                        .HasColumnType("bigint");

                    b.Property<long>("TermsId")
                        .HasColumnType("bigint");

                    b.HasKey("RulesId", "TermsId");

                    b.HasIndex("TermsId");

                    b.ToTable("RuleTerm");
                });

            modelBuilder.Entity("solemnsinger.Models.AccessLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("Create")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<bool>("Update")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("solemnsinger.Models.AccessLevelModifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("AccessLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("ModificationId");

                    b.ToTable("AccessLevelModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CategorySuggestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("solemnsinger.Models.CalendarModifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModidicantionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("ModificationId");

                    b.ToTable("CalendarModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("solemnsinger.Models.CategoryModifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ModificationId");

                    b.ToTable("CategoryModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Contract", b =>
                {
                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("TermId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("DigitalContract")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrintableContract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("LocationId", "TermId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("TermId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("solemnsinger.Models.ContractModifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContractLocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContractTermId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModificationId");

                    b.HasIndex("ContractLocationId", "ContractTermId");

                    b.ToTable("ContractModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CNPJ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RG")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("solemnsinger.Models.CustomerModifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModificationId");

                    b.ToTable("CustomerModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("CEP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LineAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LineAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("solemnsinger.Models.LocationModifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ModificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ModificationId");

                    b.ToTable("LocationModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Modification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("AccessLevelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CalendarId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContractLocationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContractTermId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("RuleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SongId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SongSingerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TermId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("CalendarId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("RuleId");

                    b.HasIndex("SongId");

                    b.HasIndex("SongSingerId");

                    b.HasIndex("TermId");

                    b.HasIndex("UserId");

                    b.HasIndex("ContractLocationId", "ContractTermId");

                    b.ToTable("Modifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Rule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("solemnsinger.Models.RuleModifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ModificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("RuleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModificationId");

                    b.HasIndex("RuleId");

                    b.ToTable("RuleModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Song", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Part")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<long>("SongSingerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SongSingerId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("solemnsinger.Models.SongModifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ModificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SongId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModificationId");

                    b.HasIndex("SongId");

                    b.ToTable("SongModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.SongSinger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SongSingers");
                });

            modelBuilder.Entity("solemnsinger.Models.SongSingerModifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ModificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SongSingerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModificationId");

                    b.HasIndex("SongSingerId");

                    b.ToTable("SongSingerModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Term", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("solemnsinger.Models.TermModifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("ModificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TermId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModificationId");

                    b.HasIndex("TermId");

                    b.ToTable("TermModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTimeModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("solemnsinger.Models.UserModifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ModificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserModifications");
                });

            modelBuilder.Entity("RuleTerm", b =>
                {
                    b.HasOne("solemnsinger.Models.Rule", null)
                        .WithMany()
                        .HasForeignKey("RulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Term", null)
                        .WithMany()
                        .HasForeignKey("TermsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("solemnsinger.Models.AccessLevel", b =>
                {
                    b.HasOne("solemnsinger.Models.User", "User")
                        .WithOne("AccessLevel")
                        .HasForeignKey("solemnsinger.Models.AccessLevel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("solemnsinger.Models.AccessLevelModifications", b =>
                {
                    b.HasOne("solemnsinger.Models.AccessLevel", "AccessLevel")
                        .WithMany("AccessLevelModifications")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Modification", "Modification")
                        .WithMany("AccessLevelModifications")
                        .HasForeignKey("ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessLevel");

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("solemnsinger.Models.Calendar", b =>
                {
                    b.HasOne("solemnsinger.Models.Category", "Category")
                        .WithMany("Calendars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("solemnsinger.Models.CalendarModifications", b =>
                {
                    b.HasOne("solemnsinger.Models.Calendar", "Calendar")
                        .WithMany("CalendarModifications")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Modification", "Modification")
                        .WithMany("CalendarModifications")
                        .HasForeignKey("ModificationId");

                    b.Navigation("Calendar");

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("solemnsinger.Models.CategoryModifications", b =>
                {
                    b.HasOne("solemnsinger.Models.Category", "Category")
                        .WithMany("CategoryModifications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Modification", "Modification")
                        .WithMany("CategoryModifications")
                        .HasForeignKey("ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("solemnsinger.Models.Contract", b =>
                {
                    b.HasOne("solemnsinger.Models.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Location", "EventLocation")
                        .WithOne("Contract")
                        .HasForeignKey("solemnsinger.Models.Contract", "LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Term", "Term")
                        .WithMany("Contracts")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("EventLocation");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("solemnsinger.Models.ContractModifications", b =>
                {
                    b.HasOne("solemnsinger.Models.Modification", "Modification")
                        .WithMany("ContractModifications")
                        .HasForeignKey("ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Contract", "Contract")
                        .WithMany("ContractModifications")
                        .HasForeignKey("ContractLocationId", "ContractTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("solemnsinger.Models.Customer", b =>
                {
                    b.HasOne("solemnsinger.Models.Location", "Location")
                        .WithOne("Customer")
                        .HasForeignKey("solemnsinger.Models.Customer", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("solemnsinger.Models.CustomerModifications", b =>
                {
                    b.HasOne("solemnsinger.Models.Customer", "Customer")
                        .WithMany("CustomerModifications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Modification", "Modification")
                        .WithMany("CustomerModifications")
                        .HasForeignKey("ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("solemnsinger.Models.LocationModifications", b =>
                {
                    b.HasOne("solemnsinger.Models.Location", "Location")
                        .WithMany("LocationModifications")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Modification", "Modification")
                        .WithMany("LocationModifications")
                        .HasForeignKey("ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("solemnsinger.Models.Modification", b =>
                {
                    b.HasOne("solemnsinger.Models.AccessLevel", null)
                        .WithMany("Modifications")
                        .HasForeignKey("AccessLevelId");

                    b.HasOne("solemnsinger.Models.Calendar", null)
                        .WithMany("Modifications")
                        .HasForeignKey("CalendarId");

                    b.HasOne("solemnsinger.Models.Category", null)
                        .WithMany("Modifications")
                        .HasForeignKey("CategoryId");

                    b.HasOne("solemnsinger.Models.Customer", null)
                        .WithMany("Modifications")
                        .HasForeignKey("CustomerId");

                    b.HasOne("solemnsinger.Models.Location", null)
                        .WithMany("Modifications")
                        .HasForeignKey("LocationId");

                    b.HasOne("solemnsinger.Models.Rule", null)
                        .WithMany("Modifications")
                        .HasForeignKey("RuleId");

                    b.HasOne("solemnsinger.Models.Song", null)
                        .WithMany("Modifications")
                        .HasForeignKey("SongId");

                    b.HasOne("solemnsinger.Models.SongSinger", null)
                        .WithMany("Modifications")
                        .HasForeignKey("SongSingerId");

                    b.HasOne("solemnsinger.Models.Term", null)
                        .WithMany("Modifications")
                        .HasForeignKey("TermId");

                    b.HasOne("solemnsinger.Models.User", null)
                        .WithMany("Modifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Contract", null)
                        .WithMany("Modifications")
                        .HasForeignKey("ContractLocationId", "ContractTermId");
                });

            modelBuilder.Entity("solemnsinger.Models.RuleModifications", b =>
                {
                    b.HasOne("solemnsinger.Models.Modification", "Modification")
                        .WithMany("RuleModifications")
                        .HasForeignKey("ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Rule", "Rule")
                        .WithMany("RuleModifications")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("solemnsinger.Models.Song", b =>
                {
                    b.HasOne("solemnsinger.Models.SongSinger", "SongSinger")
                        .WithMany("Songs")
                        .HasForeignKey("SongSingerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SongSinger");
                });

            modelBuilder.Entity("solemnsinger.Models.SongModifications", b =>
                {
                    b.HasOne("solemnsinger.Models.Modification", "Modification")
                        .WithMany("SongModifications")
                        .HasForeignKey("ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.Song", "Song")
                        .WithMany("SongModifications")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("solemnsinger.Models.SongSingerModifications", b =>
                {
                    b.HasOne("solemnsinger.Models.Modification", "Modification")
                        .WithMany("SongSingerModifications")
                        .HasForeignKey("ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.SongSinger", "SongSinger")
                        .WithMany("SongSingerModifications")
                        .HasForeignKey("SongSingerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");

                    b.Navigation("SongSinger");
                });

            modelBuilder.Entity("solemnsinger.Models.TermModifications", b =>
                {
                    b.HasOne("solemnsinger.Models.Modification", null)
                        .WithMany("TermModifications")
                        .HasForeignKey("ModificationId");

                    b.HasOne("solemnsinger.Models.Term", null)
                        .WithMany("TermModifications")
                        .HasForeignKey("TermId");
                });

            modelBuilder.Entity("solemnsinger.Models.UserModifications", b =>
                {
                    b.HasOne("solemnsinger.Models.Modification", "Modification")
                        .WithMany("UserModifications")
                        .HasForeignKey("ModificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("solemnsinger.Models.User", "User")
                        .WithMany("UserModifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("solemnsinger.Models.AccessLevel", b =>
                {
                    b.Navigation("AccessLevelModifications");

                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Calendar", b =>
                {
                    b.Navigation("CalendarModifications");

                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Category", b =>
                {
                    b.Navigation("Calendars");

                    b.Navigation("CategoryModifications");

                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Contract", b =>
                {
                    b.Navigation("ContractModifications");

                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Customer", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("CustomerModifications");

                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Location", b =>
                {
                    b.Navigation("Contract");

                    b.Navigation("Customer");

                    b.Navigation("LocationModifications");

                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Modification", b =>
                {
                    b.Navigation("AccessLevelModifications");

                    b.Navigation("CalendarModifications");

                    b.Navigation("CategoryModifications");

                    b.Navigation("ContractModifications");

                    b.Navigation("CustomerModifications");

                    b.Navigation("LocationModifications");

                    b.Navigation("RuleModifications");

                    b.Navigation("SongModifications");

                    b.Navigation("SongSingerModifications");

                    b.Navigation("TermModifications");

                    b.Navigation("UserModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Rule", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("RuleModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Song", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("SongModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.SongSinger", b =>
                {
                    b.Navigation("Modifications");

                    b.Navigation("Songs");

                    b.Navigation("SongSingerModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.Term", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Modifications");

                    b.Navigation("TermModifications");
                });

            modelBuilder.Entity("solemnsinger.Models.User", b =>
                {
                    b.Navigation("AccessLevel");

                    b.Navigation("Modifications");

                    b.Navigation("UserModifications");
                });
#pragma warning restore 612, 618
        }
    }
}
